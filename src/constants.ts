import { expressionStatement, stringLiteral } from '@babel/types';

import { ImportOrder } from './types';

export const newLineCharacters = '\n\n';

/*
 * Used to mark the position between RegExps,
 * where the not matched imports should be placed
 */
export const THIRD_PARTY_MODULES_SPECIAL_WORD = 'utils';

const PRETTIER_PLUGIN_SORT_IMPORTS_NEW_LINE = 'PRETTIER_PLUGIN_SORT_IMPORTS_NEW_LINE';

export const newLineNode = expressionStatement(
  stringLiteral(PRETTIER_PLUGIN_SORT_IMPORTS_NEW_LINE)
);

export enum IMPORT_ORDER_KEY {
  PACKAGES = 'packages',
  COMPONENTS = 'components',
  UTILS = 'utils',
  STYLES = 'styles',
}

export const REGS = {
  ABS_PATH: new RegExp(
    "('apply/)|('apply-mobile/)|('apply-web/)|('chrome-extension/)|('common/)|('dajie-api/)|('deliver_query/)|('foreground/)|('headhunter/)|('hr_mobile/)|('interview_signin/)|('lagou-sms/)|('lingui/)|('main-app/)|('oneclick/)|('reset_password/)|('server/)|('shixiseng-api/)|('sign_in/)|('source_signin/)"
  ),
  PACKAGE: /^([a-z]|@)(.+)$/,
  COMPONENT: /([A-Z](\w+))$/,
  STYLES: /(.styl|.css)$/,
};

export const DEFAULT_IMPORT_ORDER: ImportOrder[] = [
  {
    group: IMPORT_ORDER_KEY.PACKAGES,
    condition: (str: string) => {
      return REGS.PACKAGE.test(str) && !REGS.ABS_PATH.test(str);
    },
  },
  {
    group: IMPORT_ORDER_KEY.COMPONENTS,
    condition: (str: string) => {
      return REGS.COMPONENT.test(str);
    },
  },
  {
    group: IMPORT_ORDER_KEY.UTILS,
  },
  {
    group: IMPORT_ORDER_KEY.STYLES,
    condition: (str: string) => {
      return REGS.STYLES.test(str);
    },
  },
];

export const CSS_ORDER = [
  // @extend @mixin
  '@',
  // position and layout
  'position',
  'z-index',
  'top',
  'right',
  'bottom',
  'left',
  'float',
  'clear',
  'direction',
  // display and visibility
  'display',
  'opacity',
  'visibility',
  'orientation',
  'max-zoom',
  'min-zoom',
  'user-zoom',
  'zoom',
  // flexbox
  'flex',
  'flex-grow',
  'flex-shrink',
  'flex-basis',
  'flex-flow',
  'flex-direction',
  'flex-wrap',
  'justify-content',
  'align-items',
  'align-content',
  'align-self',
  'order',
  // box model and background
  'box-sizing',
  'width',
  'min-width',
  'max-width',
  'height',
  'min-height',
  'max-height',
  'margin',
  'margin-top',
  'margin-right',
  'margin-bottom',
  'margin-left',
  'padding',
  'padding-top',
  'padding-right',
  'padding-bottom',
  'padding-left',
  'border',
  'border-width',
  'border-style',
  'border-color',
  'border-top',
  'border-top-width',
  'border-top-style',
  'border-top-color',
  'border-right',
  'border-right-width',
  'border-right-style',
  'border-right-color',
  'border-bottom',
  'border-bottom-width',
  'border-bottom-style',
  'border-bottom-color',
  'border-left',
  'border-left-width',
  'border-left-style',
  'border-left-color',
  'border-radius',
  'border-top-left-radius',
  'border-top-right-radius',
  'border-bottom-right-radius',
  'border-bottom-left-radius',
  'border-image',
  'border-image-source',
  'border-image-slice',
  'border-image-width',
  'border-image-outset',
  'border-image-repeat',
  'border-top-image',
  'border-right-image',
  'border-bottom-image',
  'border-left-image',
  'border-corner-image',
  'border-top-left-image',
  'border-top-right-image',
  'border-bottom-right-image',
  'border-bottom-left-image',
  'outline',
  'outline-width',
  'outline-style',
  'outline-color',
  'outline-offset',
  'box-shadow',
  'background',
  'background-color',
  'background-image',
  'background-repeat',
  'background-attachment',
  'background-position',
  'background-clip',
  'background-origin',
  'background-size',
  // typography
  'color',
  'font',
  'font-style',
  'font-variant',
  'font-weight',
  'font-size',
  'line-height',
  'font-family',
  'font-size-adjust',
  'font-stretch',
  'text-align',
  'text-align-last',
  'text-decoration',
  'text-emphasis',
  'text-emphasis-position',
  'text-emphasis-style',
  'text-emphasis-color',
  'text-indent',
  'text-justify',
  'text-outline',
  'text-overflow',
  'text-overflow-ellipsis',
  'text-overflow-mode',
  'text-size-adjust',
  'text-transform',
  'text-wrap',
  'text-shadow',
  'vertical-align',
  'writing-mode',
  'hyphens',
  'letter-spacing',
  'tab-size',
  'white-space',
  'word-break',
  'word-spacing',
  'word-wrap',
  // others
  'clip',
  'overflow',
  'overflow-x',
  'overflow-y',
  'list-style',
  'list-style-position',
  'list-style-type',
  'list-style-image',
  'table-layout',
  'border-spacing',
  'border-collapse',
  'caption-side',
  'empty-cells',
  'columns',
  'column-width',
  'column-count',
  'column-fill',
  'column-gap',
  'column-rule',
  'column-rule-width',
  'column-rule-style',
  'column-rule-color',
  'column-span',
  'cursor',
  'user-select',
  'nav-index',
  'nav-up',
  'nav-right',
  'nav-down',
  'nav-left',
  'pointer-events',
  'resize',
  'content',
  'counter-increment',
  'counter-reset',
  'quotes',
  'transition',
  'transition-property',
  'transition-duration',
  'transition-timing-function',
  'transition-delay',
  'animation',
  'animation-name',
  'animation-duration',
  'animation-timing-function',
  'animation-delay',
  'animation-iteration-count',
  'animation-direction',
  'animation-fill-mode',
  'animation-play-state',
  'filter',
  'transform',
  'transform-origin',
  'will-change',
];
